import {
  Controller,
  Get,
  Req,
  UseGuards,
  Res,
  HttpException,
  HttpStatus,
} from '@nestjs/common';
import { AuthGuard } from '@nestjs/passport';
import { I18nLang, I18nService } from 'nestjs-i18n';
import { Response } from 'express';
import { ResponseService } from 'src/responses/responses.service';
import { GoogleService } from './google.service';

@Controller({ path: 'google', version: '1' })
export class GoogleController {
  constructor(
    private readonly googleService: GoogleService,
    private readonly i18n: I18nService,
    private readonly responses: ResponseService,
  ) {}

  @Get()
  @UseGuards(AuthGuard('google'))
  async googleAuth(@Req() req) {
    return 'erere';
  }

  @Get('redirect')
  @UseGuards(AuthGuard('google'))
  async googleAuthRedirect(
    @Req() req,
    @Res({ passthrough: true }) res: Response,
    @I18nLang() lang: string,
  ) {
    console.log('====================== Guard ========================');
    //return this.googleService.googleLogin(req);
    try {
      const resultRs = await this.googleService.googleLogin(req);
      const message = await this.i18n.translate(resultRs.msg, {
        lang: lang,
        args: {},
      });

      return this.responses.sendResp(
        res,
        resultRs.status,
        message,
        resultRs.data,
      );
    } catch {
      throw new HttpException(
        {
          key: 'auth.UNABLE_TO_SIGNIN',
          args: {},
          data: {},
        },
        HttpStatus.FORBIDDEN,
      );
    }
  }
}
